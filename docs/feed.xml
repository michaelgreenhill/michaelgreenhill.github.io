<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael Greenhill</title>
  <subtitle>IT and Photography</subtitle>
  <link href="https://michaelgreenhill.net/feed.xml" rel="self"/>
  <link href="https://michaelgreenhill.net/"/>
  <id>https://michaelgreenhill.net/</id>
  <updated>2020-05-05T10:00:00+10:00</updated>
  <author>
    <name>Michael Greenhill</name>
    <email>me@michaelgreenhill.net</email>
  </author>
  
  <entry>
    <title>Making my homelab smarter - Part 1</title>
    <link href="https://michaelgreenhill.net/making-my-homelab-smarter-part-1/"/>
    <updated>2020-01-07T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/making-my-homelab-smarter-part-1/</id>
    <content type="html">&lt;p&gt;It’s always the way, isn’t it? The builder’s house is need of repairs, the chef’s cupboard is always empty, and the IT professional’s home lab is trash.&lt;/p&gt;
&lt;p&gt;Ah ok, maybe just my lab then…&lt;/p&gt;
&lt;p&gt;For the last five years I’ve been “enjoying” life on ADSL in Melbourne’s outer east — and therefore, I’ve had no real need or desire to drop coin on a decent home lab. Why bother, when my best speed was 7mbps down/1mbps up? Well, with FTTC NBN arriving on my doorstep within the next six months and a reasonably-priced Optus 4G plan to supplement my glacial ADSL, I figured the time was ripe to upgrade.&lt;/p&gt;
&lt;p&gt;That, and my ADSL router decided it was necessary to do a full reboot any time any config directives were changed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;the-sad-state-of-affairs&quot;&gt;The sad state of affairs &lt;a class=&quot;anchor-link&quot; href=&quot;#the-sad-state-of-affairs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Between 2015 and now, my home network consisted of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FritzBox 7270 xDSL router&lt;/li&gt;
&lt;li&gt;QNAP TVS-663 6-bay NAS&lt;/li&gt;
&lt;li&gt;Ubiquiti AP-AC-Pro&lt;/li&gt;
&lt;li&gt;Cisco SG-100D-08 gigabit unmanaged switch&lt;/li&gt;
&lt;li&gt;Ubiquiti Unifi Switch-8 PoE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main limitation with this setup was the FritzBox xDSL router. While it had nice ADSL functionality and, to be fair, better reliability at high speeds compared to other routers, it was also quite limited in other respects. For example, it was impossible to change the DNS suffix from “.fritz.box”&lt;/p&gt;
&lt;p&gt;Honestly, it was fine for the average user, but rubbish for any kind of serious customisation.&lt;/p&gt;
&lt;p&gt;The QNAP NAS runs a number of containers, such as the Unifi Controller and the Unifi NVR for my IP cameras. But, it was also proving to be slow, clunky, and increasingly difficult to manage said containers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;improvements&quot;&gt;Improvements &lt;a class=&quot;anchor-link&quot; href=&quot;#improvements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, maybe not.&lt;/p&gt;
&lt;p&gt;Once the NBN works commenced in my area the ADSL speed dropped down to 4mbps down/400kbps up. During the troubleshooting process I bought a new NBN-compatible router, an Asus DSL-AC86U.&lt;/p&gt;
&lt;p&gt;Let me tell you the ways in which this router is an absolute joke:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The price. It retails for $250&lt;/li&gt;
&lt;li&gt;Almost any change, at all, requires a full reboot. Oh, and it doesn’t tell you it’s about to reboot, it just does it.&lt;/li&gt;
&lt;li&gt;Yes, it has WAN failover. But only from DSL to USB/Ethernet, not to DSL.&lt;/li&gt;
&lt;li&gt;The multi-WAN load balancing doesn’t work — it’s either all or nothing, irrespective of what ratio is used&lt;/li&gt;
&lt;li&gt;Yes, it has an SSH terminal via AsusWRT. But, no cron engine (at least, none that works — cru doesn’t persist jobs between reboots)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could go on, but frankly, I’m already bored.&lt;/p&gt;
&lt;h2 id=&quot;biting-the-bullet-and-dropping-the-coin&quot;&gt;Biting the bullet and dropping the coin &lt;a class=&quot;anchor-link&quot; href=&quot;#biting-the-bullet-and-dropping-the-coin&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was always my intention to invest in a pfSense-based router come NBN time, either in advance of or after connection. So, borne out of my frustrations with both the FritzBox and the Asus routers, I made myself a pfSense router via the router-on-a-stick design.&lt;/p&gt;
&lt;h3 id=&quot;the-shopping-list&quot;&gt;The shopping list &lt;a class=&quot;anchor-link&quot; href=&quot;#the-shopping-list&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scorptec.com.au/product/Branded-Systems/NUC-&amp;amp;-Mini-PC/59984-BOXNUC5PPYH/?member_pricing=true&quot;&gt;Intel Mini PC NUC Kit NUC5PPYH&lt;/a&gt;&lt;br&gt;
$199.00&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scorptec.com.au/product/Memory/SODIMM/52039-KVR16LS11-8/?member_pricing=true&quot;&gt;1x Kingston KVR16LS11/8 8GB 1600MHz DDR3L SODIMM&lt;/a&gt;&lt;br&gt;
$69&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scorptec.com.au/product/Hard-Drives-&amp;amp;-SSDs/SSD-2.5-&amp;amp;-PCI-Express/70810-WDS120G2G0A/?member_pricing=true&quot;&gt;1x Western Digital WD Green 3D NAND 120GB SSD&lt;/a&gt;&lt;br&gt;
$32&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, I also had a Ubiquiti EdgeRouter X which I configured in Layer-2 switching mode, to provide the VLANs necessary for a single-NIC router.&lt;/p&gt;
&lt;h3 id=&quot;the-topology&quot;&gt;The topology &lt;a class=&quot;anchor-link&quot; href=&quot;#the-topology&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As you can see from the diagram below, the pfSense router is a router-on-a-stick; that is, it has one interface carrying traffic separated by VLANs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_omi0RFCCZNWaUQGTgcnjCA.png&quot; alt=&quot;Magical packet mystery tour&quot;&gt;&lt;/p&gt;
&lt;p&gt;The ADSL router is the POS Asus DSL-AC68U — not configured for bridge mode, because it doesn’t support it — but with everything disabled (DHCP, NAT, firewalled to the nth degree, etc) and with PPPoE forwarding enabled.&lt;/p&gt;
&lt;p&gt;Frustratingly, I still need to maintain a PPPoE connection on the Asus router for PPPoE forwarding to be stable. Without a valid PPPoE connection, the pfSense router can create a PPPoE connection on its own, but it drops after a few seconds. Every. Time.&lt;/p&gt;
&lt;h3 id=&quot;but-you-had-an-edgerouter-x%2C-why-didn%E2%80%99t-you-use-it-as-a-router%3F&quot;&gt;But you had an EdgeRouter X, why didn’t you use it as a router? &lt;a class=&quot;anchor-link&quot; href=&quot;#but-you-had-an-edgerouter-x%2C-why-didn%E2%80%99t-you-use-it-as-a-router%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because I didn’t want to.&lt;/p&gt;
&lt;p&gt;I know pfSense like the back of my hand and I knew I could spin up a secure multi-WAN router with load balancing, IDS/IPS, and policy-based routing (spoiler alert for part 2) within a day. Some of that functionality just doesn’t exist on the EdgeRouter X.&lt;/p&gt;
&lt;h2 id=&quot;but-wait%2C-tell-me-more!&quot;&gt;But wait, tell me more! &lt;a class=&quot;anchor-link&quot; href=&quot;#but-wait%2C-tell-me-more!&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-2/&quot;&gt;Part 2&lt;/a&gt; for more salacious details.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Making my homelab smarter - Part 2</title>
    <link href="https://michaelgreenhill.net/making-my-homelab-smarter-part-2/"/>
    <updated>2020-01-07T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/making-my-homelab-smarter-part-2/</id>
    <content type="html">&lt;p&gt;Back in &lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-1/&quot;&gt;Part 1&lt;/a&gt; I waffled on about the sad state of my internet and what I intended to do about it.&lt;/p&gt;
&lt;h2 id=&quot;why-should-i-care-about-pfsense%3F&quot;&gt;Why should I care about pfSense? &lt;a class=&quot;anchor-link&quot; href=&quot;#why-should-i-care-about-pfsense%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, in my case, it comes down to a few choice points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-WAN that actually works as it’s supposed to&lt;/li&gt;
&lt;li&gt;Policy-based routing&lt;/li&gt;
&lt;li&gt;Security in a world of IoT nonsense&lt;/li&gt;
&lt;li&gt;IPv6&lt;/li&gt;
&lt;li&gt;Observability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s also open-source and built on FreeBSD — both a bonus from cost and security perspectives.&lt;/p&gt;
&lt;h2 id=&quot;give-me-that-sweet-wan&quot;&gt;Give me that sweet WAN &lt;a class=&quot;anchor-link&quot; href=&quot;#give-me-that-sweet-wan&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;For the uninitiated, “WAN” refers to “Wide Area Network”. It’s a fancy way of saying “internet”.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In terms of actual internet connections I have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internode Naked ADSL2, maxing out at 4mbps down and 400kbps up&lt;/li&gt;
&lt;li&gt;Optus 4G with a 500gb data cap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So until NBN finally kicks down my door and shoves a 100mbps pipe of memes into my network, I have to make do with a balance of ADSL and 4G.&lt;/p&gt;
&lt;h3 id=&quot;so-what-does-multi-wan-look-like%3F&quot;&gt;So what does multi-WAN look like? &lt;a class=&quot;anchor-link&quot; href=&quot;#so-what-does-multi-wan-look-like%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some things should only ever go via ADSL&lt;/li&gt;
&lt;li&gt;Some things should only ever go via 4G&lt;/li&gt;
&lt;li&gt;Some things should try to go via ADSL and failover to 4G, and&lt;/li&gt;
&lt;li&gt;Some things should try to go via 4G and failover to ADSL&lt;/li&gt;
&lt;li&gt;Some things should load balance across ADSL and 4G&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example; my ADSL connection can happily stream Netflix, Stan, Amazon Prime, YouTube etc. to my 55&amp;quot; TV with “good enough” quality. Therefore, that traffic should only ever go via ADSL, so I don’t blow out my data usage in one binge session of The Witcher (toss a coin, yeah?)&lt;/p&gt;
&lt;p&gt;Conversely, low-latency traffic (RDP, SSH) should go via 4G, to stop me from throwing expensive IT equipment in frustration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_1SYWH-QudwNvXrH1VUAlhw.png&quot; alt=&quot;Don’t you go peeping and my IPs, ya hear me&quot;&gt;&lt;/p&gt;
&lt;p&gt;Don’t you go peeping and my IPs, ya hear me!&lt;/p&gt;
&lt;p&gt;From here I’ve put the gateways into gateway groups — these control failover and load balancing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_bJgTd-LKMdIrIIVdCkLPng.png&quot; alt=&quot;Annoyingly, IPv6 duplicates everything&quot;&gt;&lt;/p&gt;
&lt;p&gt;Annoyingly, IPv6 duplicates everything.&lt;/p&gt;
&lt;p&gt;We can visualise the failover and gateway preference via the Status &amp;gt; Gateways page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_jDsM0PU32ro6rXQDrUweDg.png&quot; alt=&quot;A bug in pfSense shows the IPv6 gateways as “Gathering data” here, but elsewhere they are “Online”&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;those-were-pretty-pictures%2C-now-what%3F&quot;&gt;Those were pretty pictures, now what? &lt;a class=&quot;anchor-link&quot; href=&quot;#those-were-pretty-pictures%2C-now-what%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, next we need to tell pfSense what should go out via those gateways. As much as I’d like to shout “OK pfSense, send all Netflix through ADSL” it’s just not that clever. Yet.&lt;/p&gt;
&lt;p&gt;The next best thing would be to create a firewall rule for anything going to &lt;a href=&quot;http://netflix.com/&quot;&gt;netflix.com&lt;/a&gt;. Unfortunately, that won’t work. Because Netflix is so massive and &lt;a href=&quot;https://variety.com/2019/digital/news/netflix-loses-title-top-downstream-bandwidth-application-1203330313/&quot;&gt;consumes 12.9% of all internet&lt;/a&gt; traffic — think about that, for a minute — it has a huge content delivery network, with its Open Connect peering injecting cake videos straight to the ISP networks. It’s also mercurial — servers that are up one minute are downed the next, thanks to Chaos Monkey.&lt;/p&gt;
&lt;p&gt;And since this needs to be a &lt;strong&gt;reliable&lt;/strong&gt; and &lt;strong&gt;dependable&lt;/strong&gt; routing solution, the best approach is to apply the rule to the client. In other words, &lt;strong&gt;all traffic&lt;/strong&gt; from my TV and my Chromecast should go via the ADSL gateway. We accomplish this via a firewall alias:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_GUXrZ862oho5ams1IXC-QQ.png&quot; alt=&quot;For testing purposes, I’m allowing these devices to fall back to 4G&quot;&gt;&lt;/p&gt;
&lt;p&gt;For testing purposes, I’m allowing these devices to fall back to 4G.&lt;/p&gt;
&lt;h3 id=&quot;tying-it-all-together-with-a-bow&quot;&gt;Tying it all together with a bow &lt;a class=&quot;anchor-link&quot; href=&quot;#tying-it-all-together-with-a-bow&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, we create a firewall rule to route this traffic accordingly.&lt;/p&gt;
&lt;p&gt;Specifying the source as our firewall alias and our destination as “http_ports” (another alias of ports 80 and 443)…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_9AvJ0Ndfdt9huSSxk8aDaA.png&quot; alt=&quot;All streaming services run over HTTPS, so we can limit the rule to just these ports&quot;&gt;&lt;/p&gt;
&lt;p&gt;All streaming services run over HTTPS, so we can limit the rule to just these ports&lt;/p&gt;
&lt;p&gt;Next, we specify the gateway group…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_KJ9g0FvxpORAhJSvSKAcOw.png&quot; alt=&quot;This image has no caption. Surprise!&quot;&gt;&lt;/p&gt;
&lt;p&gt;…and hey, presto! We have a policy-based route that directs all traffic from my TV and from my Chromecast, over ports 80 and 443, out through the ADSL router.&lt;/p&gt;
&lt;p&gt;Yeah, it’s not quite the most elegant solution, but it’s a &lt;strong&gt;simple solution&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;But your default gateway is WAN_PPPOE?&lt;/p&gt;
&lt;p&gt;Yeah, you saw that huh? Yes, the above example is theoretically useless because, unless otherwise instructed by a firewall rule, &lt;strong&gt;all traffic&lt;/strong&gt; will go out via the ADSL link. But that’s just this point in time. By the time this series is finished, I hope to have my 4G link set up as my default route, either implicitly via discrete firewall rules as I’ve just demonstrated, or explicitly via the default gateway option.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Making my homelab smarter - Part 3</title>
    <link href="https://michaelgreenhill.net/making-my-homelab-smarter-part-3/"/>
    <updated>2020-01-08T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/making-my-homelab-smarter-part-3/</id>
    <content type="html">&lt;p&gt;Let’s recap. Back in &lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-1&quot;&gt;Part 1&lt;/a&gt;, I had a proper grumble about ADSL and routers. In &lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-2&quot;&gt;Part 2&lt;/a&gt; we enjoyed a good chat about multi-WAN (load balancing, failover) and policy-based routing.&lt;/p&gt;
&lt;h2 id=&quot;the-big%2C-scary%2C-ipv6-monster&quot;&gt;The big, scary, IPv6 monster &lt;a class=&quot;anchor-link&quot; href=&quot;#the-big%2C-scary%2C-ipv6-monster&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For those who don’t know, we’re out of IPv4 addresses. Globally. They’re all gone. They even looked behind the fridge for more. So, it’s time to embrace IPv6 (so far as your ISP will allow it!).&lt;/p&gt;
&lt;p&gt;My ISP, Internode, gives me a delegated /56 block of addresses. “What does /56 mean?” I hear you all cry? Basically, instead of getting a single public IP address (as was typically the case with IPv4), I have &lt;strong&gt;4,722,366,482,869,645,213,696&lt;/strong&gt; publicly-routable addresses to play with.&lt;/p&gt;
&lt;p&gt;It’s a visually offensive number. Unfathomably large. I don’t even know which “illion” that comes out to. I tried to frame it as the number of seconds in a century, and it still came out to be a ridiculous number of centuries.&lt;/p&gt;
&lt;p&gt;So while some of us are used to the IPv4 dotted-quad notation (192.168.1.1 with a subnet mask of 255.255.255.0), IPv6 goes a bit crazy and calls it the “canonical textual representation format” — one of those terms that just makes me feel warm and fuzzy inside — which looks something like 2001:db8:1234:0000:0000:0000:0000:0001. Thankfully, that can be shortened to 2001:db8:1234::1. For some quality bedtime reading, I suggest checking out the &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6_address&quot;&gt;Wikipedia article on IPv6&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;taming%2C-understanding%2C-and-eventually%2C-loving-the-monster&quot;&gt;Taming, understanding, and eventually, loving the monster &lt;a class=&quot;anchor-link&quot; href=&quot;#taming%2C-understanding%2C-and-eventually%2C-loving-the-monster&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to some epic sleuthing (aka Google) I’ve got the following recipe to get IPv6 working both at the edge of and inside my network.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: IPv6 is &lt;strong&gt;globally routable!&lt;/strong&gt; The concept of NAT, and the security-through-obscurity that it provides, does not exist in IPv6. Any IPv6 addresses that you issue to your LAN computers can be reached from the internet — unless you have a good firewall. I take no responsibility if you get all virus’d up.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first thing we need to do is set our WAN interface’s IPv6 configuration to &lt;strong&gt;DHCP6&lt;/strong&gt;. This will get a /64 address from our ISP and provide a path out to the internet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_KIOqbpN_DiUfS5Xk98PrqA.png&quot; alt=&quot;So far, so good&quot;&gt;&lt;/p&gt;
&lt;p&gt;The trick here is to use the IPv4 interface (our PPPoE ADSL tunnel) to request our IPv6 connectivity.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_Sw0YDnf5gPJSbIjM1VoGoA.png&quot; alt=&quot;The 6 in IPv6 stands for &amp;quot;god damn enormous&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Save and apply the changes, then head over to the LAN interface. Here’s where it gets interesting. Set the IPv6 configuration type to &lt;strong&gt;Track Interface…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_86QT4D8YTA-7Y5Sk_Vbt_Q.png&quot; alt=&quot;&amp;quot;Track Interface&amp;quot; is what used to happen when I passed out while running. Say that one out loud.&quot;&gt;&lt;/p&gt;
&lt;p&gt;…then scroll down to the IPv6 Track Interface section, and set the &lt;strong&gt;IPv6 Interface&lt;/strong&gt; to &lt;strong&gt;WAN&lt;/strong&gt; and the &lt;strong&gt;Prefix ID&lt;/strong&gt; to &lt;strong&gt;0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_PqucCadu7X-4ZAcNumGFhQ.png&quot; alt=&quot;The Prefix ID may not be 0 — this may require some tweaking and contact with your ISP.&quot;&gt;&lt;/p&gt;
&lt;p&gt;Save and apply, then head to the &lt;strong&gt;Status &amp;gt; Interfaces&lt;/strong&gt; page. This will show you your WAN IPv6, your LAN IPv6, and any IPv6 Link Local addresses.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_hZgDYaeBrvezuxnw4ozFAg.png&quot; alt=&quot;Magic!&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step, of course, is configuring pfSense to issue IPv6 addresses to machines on your network. Head on over to Services &amp;gt; DHCPv6 Server &amp;amp; RA.&lt;/p&gt;
&lt;p&gt;While it looks daunting there’s actually very little that needs configuring here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable DHCPv6 server on interface LAN&lt;/li&gt;
&lt;li&gt;Set the range from ::1000 to ::2000 (or whatever size you want)&lt;/li&gt;
&lt;li&gt;Set the DNS servers&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_yMMvcM4ECmFpVGPRbYqjUA.png&quot; alt=&quot;I&#39;m using the ::1 address from my /56 subnet as the DNS server — i.e., the pfSense router.&quot;&gt;&lt;/p&gt;
&lt;p&gt;The final step is to configure the &lt;strong&gt;Router Advertisements&lt;/strong&gt; section. You’ll have noticed that the DHCPv6 configuration doesn’t have an option to specify the default gateway — IPv6 does away with the concept of static gateways and, using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Neighbor_Discovery_Protocol&quot;&gt;Neighbor Discovery Protocol&lt;/a&gt; (NDP), announces to the network what the router (aka default gateway) is.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_OXaSP4H123fBKGev11y0nQ.png&quot; alt=&quot;Probably should caption this, eh&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lastly, at the bottom of the page, check the checkbox next to &lt;strong&gt;Use same settings as DHCPv6 server&lt;/strong&gt;, and click &lt;strong&gt;Save&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_DcjQ3vTDFE-k7Q_PAatOPw.png&quot; alt=&quot;Hey, presto! DHCPv6.&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_F5iT46roUJaBhAOV3fJNjA.png&quot; alt=&quot;Spookyboi numbers&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;once-again%2C-get-your-firewall-sorted-out&quot;&gt;Once again, get your firewall sorted out &lt;a class=&quot;anchor-link&quot; href=&quot;#once-again%2C-get-your-firewall-sorted-out&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;pfSense has a deny-by-default approach to firewall rules. Unless a rule exists to allow the traffic, it’s blocked. This is good!&lt;/p&gt;
&lt;p&gt;Unless you’ve a really good reason for allowing traffic into your network on the WAN interface, &lt;strong&gt;don’t&lt;/strong&gt;. Before you get IPv6 configured, take a few seconds to verify you don’t have a cheeky “allow-all” rule on your WAN interface.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;glossary&quot;&gt;Glossary &lt;a class=&quot;anchor-link&quot; href=&quot;#glossary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Someone pointed out that a glossary of terms would be useful. So, Guy, here ya go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6&quot;&gt;IPv6:&lt;/a&gt; the 6th version of the Internet Protocol.&lt;/li&gt;
&lt;li&gt;ISP: Internet Service Provider. Telstra, Verizon, BT, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Subnetwork&quot;&gt;Subnet mask&lt;/a&gt;: a method used to divide an IP address range.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT: Network Address Translation&lt;/a&gt;. Wot allows millions of 192.168.168.1 home routers to coexist on the internet without it literally erupting into flames.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing&quot;&gt;/64, /56: Classless Inter-Domain Routing network sizes&lt;/a&gt;. A way of expressing the division of IP address ranges into smaller chunks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&quot;&gt;DHCPv6&lt;/a&gt;: The IPv6 version of the well-loved Dynamic Host Configuration Protocol. Dynamically issues an IP address to your computer from a larger pool of addresses.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Link-local_address&quot;&gt;Link Local&lt;/a&gt;: A method used by IPv4 and IPv6 to self-issue IP addresses in the absence of DHCP or a statically-configured address.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Making my homelab smarter - Part 4</title>
    <link href="https://michaelgreenhill.net/making-my-homelab-smarter-part-4/"/>
    <updated>2020-01-09T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/making-my-homelab-smarter-part-4/</id>
    <content type="html">&lt;p&gt;Up until now, this series has been focusing on pfSense, but there’s more to a homelab than a router. I know, &lt;em&gt;controversial&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-1/&quot;&gt;Part 1&lt;/a&gt; | &lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-2/&quot;&gt;Part 2&lt;/a&gt; | &lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-3/&quot;&gt;Part 3&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: this is not going to be an in-depth guide. I’m only hoping to tickle your tastebuds in the hope it motivates you, dear reader, into learning something new. Drop a comment or &lt;a href=&quot;https://www.reddit.com/user/doctorjbeam&quot;&gt;hit me up on Reddit&lt;/a&gt; if you want something more detailed.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;con-tain-er-ise&quot;&gt;Con-tain-er-ise &lt;a class=&quot;anchor-link&quot; href=&quot;#con-tain-er-ise&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another trend, another buzzword, another paradigm shift. Yeah, but containers are an absolute gem for the homelabber who wants to play around with the newest virtual toy.&lt;/p&gt;
&lt;p&gt;As I touched on in &lt;a href=&quot;https://michaelgreenhill.net/making-my-homelab-smarter-part-1/&quot;&gt;Part 1&lt;/a&gt;, I have a QNAP NAS (TVS-663) that’s been the backbone of my homelab for the last two years. Crucially, the QNAP ecosystem includes a &lt;strong&gt;Container Station&lt;/strong&gt; application. While this is an easy way to get containers up and running for a novice, there’s a couple of caveats that, over time, have proven themselves incredibly annoying:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The containers always, &lt;em&gt;&lt;strong&gt;always&lt;/strong&gt;&lt;/em&gt;, use the QNAP for their DNS, and it often fails to resolve.&lt;/li&gt;
&lt;li&gt;Loading up the Container Station is a slow process, and there’s seemingly no way to speed it up.&lt;/li&gt;
&lt;li&gt;There’s no way to mount individual files to a container.&lt;/li&gt;
&lt;li&gt;There’s no way to change existing containers beyond simple things like CPU or RAM limits. They must be deleted and re-created by hand.&lt;/li&gt;
&lt;li&gt;Pulling the “latest” tag for a container is… weird. It doesn’t update the local “latest” tag with the correct revision; instead, for every updated “latest” tag, QNAP creates a “latest-data-x” tag - cos that’s helpful!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_pUuRim3COsUhoZ0xGyi7nw.png&quot; alt=&quot;wtf.gif&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;docker-compose-to-the-rescue&quot;&gt;Docker Compose to the rescue &lt;a class=&quot;anchor-link&quot; href=&quot;#docker-compose-to-the-rescue&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So why didn’t I just use Docker Compose straight away? Well, the convenience factor of the Container Station and the lack of knowledge on the underlying container management layer was enough of a deterrent. I’m also lazy. But with the aforementioned shitlist, I decided to re-initialise my containers via &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compose lets me rapidly change my containers. Edit the file, execute &lt;code&gt;docker-compose up -d&lt;/code&gt;, and the change is done. No more messing around with capturing settings in screenshots and notepad then deleting, re-creating, figuring out I used the wrong “latest” tag, deleting again, gnashing of teeth, etc. etc.&lt;/p&gt;
&lt;pre class=&quot;language-docker&quot;&gt;&lt;code class=&quot;language-docker&quot;&gt;version&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;services&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  lidarr&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    image&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hotio/lidarr:netcore&quot;&lt;/span&gt;&lt;br&gt;    container_name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;selby-lidarr01&quot;&lt;/span&gt;&lt;br&gt;    restart&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always&lt;br&gt;    environment&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      TZ&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Australia/Melbourne&quot;&lt;/span&gt;&lt;br&gt;      UMASK&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;022&quot;&lt;/span&gt;&lt;br&gt;      PGID&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1000&lt;br&gt;      PUID&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1000&lt;br&gt;      DEBUG&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;br&gt;      ARGS&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br&gt;    volumes&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/selby-lidarr01/config:/config:rw&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Download:/download:rw&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Music:/music:rw&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/resolv.conf:/etc/resolv.conf:ro&quot;&lt;/span&gt;&lt;br&gt;    ports&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;8686:8686&quot;&lt;/span&gt;&lt;br&gt;    dns&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 192.168.178.50&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 192.168.178.1&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 1.1.1.1&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 1.0.0.1&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 8.8.8.8&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 8.8.4.4&lt;br&gt;    labels&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;traefik.enable=true&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;traefik.http.routers.to-lidarr.rule=Host(`lol-not-my-real-fqdn`)&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;traefik.http.routers.to-lidarr.tls.certresolver=le&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;traefik.http.routers.to-lidarr.tls.domains[0].main=lol-not-my-real-fqdn&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;traefik.docker.network=traefik_default&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;traefik.http.services.lidarr.loadbalancer.server.port=8686&quot;&lt;/span&gt;&lt;br&gt;    networks&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; traefik_default&lt;br&gt;    mem_limit&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 750m&lt;br&gt;&lt;br&gt;networks&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  traefik_default&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    external&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; true&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;but-wait%2C-what%E2%80%99s-this%3F-traefik%3F&quot;&gt;But wait, what’s this? Traefik? &lt;a class=&quot;anchor-link&quot; href=&quot;#but-wait%2C-what%E2%80%99s-this%3F-traefik%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ah yes, the &amp;quot;smart&amp;quot;section of Part 4. Well, Traefik is a reverse proxy service that dynamically discovers the services to proxy (via Docker labels), handles the HTTPS certs via LetsEncrypt, offers middleware such as authentication, HTTP to HTTPS redirects, and much more. They call this dynamic discovery of services…&lt;strong&gt;Service Discovery&lt;/strong&gt;. Original, yeah?&lt;/p&gt;
&lt;p&gt;Through the magic of Traefik I can, should I choose to do so, publish new containers to the outside world, or even just internally.&lt;/p&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;anchor-link&quot; href=&quot;#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yeah, the fine print. This configuration assumes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a valid domain name, with the apex or subdomain wildcard resolving to your homelab public IP.&lt;/li&gt;
&lt;li&gt;You’re using LetsEncrypt for certs (Traefik automates all of this).&lt;/li&gt;
&lt;li&gt;A firewall and/or NAT rule exists to allow/forward traffic on ports 80 and 443 to Traefik.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;do-the-thing-and-make-it-go&quot;&gt;Do the thing and make it go &lt;a class=&quot;anchor-link&quot; href=&quot;#do-the-thing-and-make-it-go&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Traefik is a container (inception!), so for it to run it needs access to the Docker socket.&lt;/p&gt;
&lt;pre class=&quot;language-docker&quot;&gt;&lt;code class=&quot;language-docker&quot;&gt;version&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3.3&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;services&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  traefik&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    image&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;traefik:latest&quot;&lt;/span&gt;&lt;br&gt;    container_name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;selby-traefik01&quot;&lt;/span&gt;&lt;br&gt;    restart&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always&lt;br&gt;    environment&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; TZ=Australia/Melbourne&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; CLOUDFLARE_EMAIL=nononeverno@magicaldomainname.com&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; CF_DNS_API_TOKEN=albatros&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; CF_ZONE_API_TOKEN=get&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;your&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;albatross&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; CF_API_EMAIL=nononeverno@magicaldomainname.com&lt;br&gt;    command&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;#- &lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;--log.level=DEBUG&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--api.insecure=true&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--providers.docker=true&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--providers.docker.exposedbydefault=false&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--entrypoints.web.address=:80&quot;&lt;/span&gt;&lt;br&gt;    volumes&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/var/run/docker.sock:/var/run/docker.sock:ro&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/resolv.conf:/etc/resolv.conf:ro&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/traefik/config/traefik.toml:/etc/traefik/traefik.toml:rw&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/traefik/config/acme.json:/etc/traefik/acme.json:rw&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/traefik/config/acme.cloudflare.json:/etc/traefik/acme.cloudflare.json:rw&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/traefik/log:/etc/traefik/log:rw&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share/Container/traefik/providers/file:/etc/traefik/providers/file:rw&quot;&lt;/span&gt;&lt;br&gt;    networks&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      default&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        ipv4_address&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 192.168.178.37&lt;br&gt;      traefik_default&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      consul&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;br&gt;networks&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  default&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    external&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; qnet&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;static&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;eth0&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;b03c93&lt;br&gt;  traefik_default&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    external&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; true&lt;br&gt;  consul&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    external&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;br&gt;      name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; another&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;docker&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;network&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Eagle-eyed viewers will spot a funky “qnap” network adapter towards the bottom - this is the QNAP bridged (aka macvlan) adapter that Container Station configures for us. This lets us assign discrete IPs to our containers, rather than just port forwarding as the previous example did. Config sample available on Github.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Before we can spin up the container using &lt;code&gt;docker-compose up -d&lt;/code&gt;, we need to give it a basic configuration. Lucky for you, I’ve prepared a sample one - &lt;a href=&quot;https://gist.github.com/michaelgreenhill/bff6271b9ed88d528ffdf75b3a27bd1e#file-traefik-toml&quot;&gt;https://gist.github.com/michaelgreenhill/bff6271b9ed88d528ffdf75b3a27bd1e#file-traefik-toml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The important lines to worry about are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 21&lt;/strong&gt; - recommend to remove or comment this out. This allows Traefik to reverse proxy to a backend HTTPS server with a self-signed certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 35&lt;/strong&gt; - make sure you put a valid email address in, otherwise you may miss out on certificate expiry notices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 36&lt;/strong&gt; - make sure this path is stored outside of the container, otherwise, the certificate store will be wiped every time the Traefik container is rebuilt.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 137&lt;/strong&gt; - this should map to your Docker socket. Without this, Traefik won’t auto-discover Docker containers to reverse proxy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 140&lt;/strong&gt; - set your publicly-resolvable domain name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you’ve customised your docker-compose.yml and traefik.toml files to suit your environment, launch it via &lt;code&gt;docker-compose up -d&lt;/code&gt;, then it’s time to proxy your containers. Using my config example, this can be accomplished in one of two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding labels to the Docker containers you wish to reverse proxy&lt;/li&gt;
&lt;li&gt;Manually creating a configuration file for that service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are, of course, other ways to configure your containers for reverse proxying but for now, let’s focus on these two methods.&lt;/p&gt;
&lt;h3 id=&quot;slapping-on-a-label&quot;&gt;Slapping on a label &lt;a class=&quot;anchor-link&quot; href=&quot;#slapping-on-a-label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the easiest way to go about reverse proxying your containers. Assuming you’re already using Docker Compose, it’s a simple matter of adding a few lines to your compose file and relaunching it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_35AbUf3XQknx_YK01xUXIw.png&quot; alt=&quot;Those colours are on-trend&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is a real-world example from my Lidarr app, with the domain name obfuscated for reasons. Dissecting it, we have a few key points to worry about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 28&lt;/strong&gt; - The port that the container uses internally needs to match up with the Traefik label on line 36&lt;br&gt;
Note: this is the internal port, not the port that you publish on. If your app runs on port 80 but you expose it to your network on port 8080, then use port 80 on line 36&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 30&lt;/strong&gt; - Enable the proxying of this container&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 31&lt;/strong&gt; - Set this to your publicly-resolvable domain name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 38&lt;/strong&gt; - Take note of the network you attach to this container. Traefik must also be attached to this network for it to reverse-proxy this container.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;doing-it-old-school-(file-based)&quot;&gt;Doing it old-school (file-based) &lt;a class=&quot;anchor-link&quot; href=&quot;#doing-it-old-school-(file-based)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you don’t want to recreate your container to apply the label, or perhaps you’re not reverse proxying a container at all, you can use file discovery. In my traefik.toml example I’ve included a directory that Traefik will watch for any changes, and because it’s mighty clever it’ll automatically apply these changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/1_rv_6VIv4DCTpqxodlWwOHA.png&quot; alt=&quot;I wonder if that&#39;s a real domain name?&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see there’s not much to it. Unlike the label-based example above, this doesn’t make use of an alternate name (SANS) for the HTTPS certificate, but it’s definitely possible to do so via file discovery.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;so-why-would-i-bother-with-containers%3F&quot;&gt;So why would I bother with containers? &lt;a class=&quot;anchor-link&quot; href=&quot;#so-why-would-i-bother-with-containers%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I dunno, cos learning is fun? But beyond the mental exercise, there are some legitimate use cases for the home labber:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unifi controller, to centrally manage your Ubiquiti access points and switches&lt;/li&gt;
&lt;li&gt;Lancache - a local cache for all things Steam, Ubisoft, etc. Great if you’re having a LAN party and want to offset the obscene hit to your internet when half a dozen people download the same 100gb game&lt;/li&gt;
&lt;li&gt;Pihole - for blocking ads, malware, gambling, porn, etc.&lt;/li&gt;
&lt;li&gt;qBittorrent, Radarr, Sonarr, Lidarr, Jackett - download torrents, manage your movies, TV shows, music, and torrent indexing&lt;/li&gt;
&lt;li&gt;HomeAssistant - automate everything&lt;/li&gt;
&lt;li&gt;A private Minecraft server&lt;/li&gt;
&lt;li&gt;MySQL/MariaDB/etc&lt;/li&gt;
&lt;li&gt;Prometheus/Grafana monitoring and visualisation&lt;/li&gt;
&lt;li&gt;Graylog for observability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Plenty to be going on with, yeah?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;glossary&quot;&gt;Glossary &lt;a class=&quot;anchor-link&quot; href=&quot;#glossary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Containerisation&lt;/strong&gt; - running self-contained, stateless applications in a preconfigured environment&lt;br&gt;
&lt;a href=&quot;https://www.docker.com/resources/what-container&quot;&gt;https://www.docker.com/resources/what-container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; - an implementation of the containerisation concept&lt;br&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Docker_(software)&quot;&gt;https://en.wikipedia.org/wiki/Docker_(software)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mount&lt;/strong&gt; - expose a file or a folder on the local filesystem to a Docker container&lt;br&gt;
&lt;a href=&quot;https://4sysops.com/archives/introduction-to-docker-bind-mounts-and-volumes/&quot;&gt;https://4sysops.com/archives/introduction-to-docker-bind-mounts-and-volumes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pulling&lt;/strong&gt; - fetch a copy of the Docker container from the registry, typically Docker Hub&lt;br&gt;
&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/pull/&quot;&gt;https://docs.docker.com/engine/reference/commandline/pull/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt; - a prescribed way of creating and updating containers from a configuration file&lt;br&gt;
&lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;https://docs.docker.com/compose/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reverse proxy&lt;/strong&gt; - retrieve resources from a backend server on behalf of a client&lt;br&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_proxy&quot;&gt;https://en.wikipedia.org/wiki/Reverse_proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service discovery&lt;/strong&gt; - automatic detection of devices and services offered by these devices on a network&lt;br&gt;
&lt;a href=&quot;https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/&quot;&gt;https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apex&lt;/strong&gt; - the root of a domain, for example, &lt;a href=&quot;http://medium.com/&quot;&gt;medium.com&lt;/a&gt; vs &lt;a href=&quot;http://www.medium.com/&quot;&gt;www.medium.com&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://news.ycombinator.com/item?id=8825519&quot;&gt;https://news.ycombinator.com/item?id=8825519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macvlan&lt;/strong&gt; - the ability to assign a MAC address to a container, making it appear as a standalone device on the network&lt;br&gt;
&lt;a href=&quot;https://docs.docker.com/network/&quot;&gt;https://docs.docker.com/network/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Night photography - Part 1</title>
    <link href="https://michaelgreenhill.net/night-photography-part-1/"/>
    <updated>2020-02-16T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/night-photography-part-1/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;This is a rehash of my presentation at the Railway Photography Forum at the Powerhouse Museum, back in 2018.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The evolution of cameras and lighting over the last decade has given us new opportunities to take photos. Where previously we may head for home as soon as the sun dips below the horizon, the improved light sensitivity in modern SLRs and the affordability of off-camera lighting means, with a bit of practice and planning, we can now commit to image scenes that otherwise would be lost.&lt;/p&gt;
&lt;p&gt;It’s only in the last five years that my passion for night photography has really taken off. Since moving close to Puffing Billy I’ve taken advantage of the regular night trains to develop my skills. While you might not be lucky enough to have a preserved railway in your backyard, I encourage you all to go out and practice wherever possible. After all, digital photos are cheap – just the cost of a battery charge – so there’s no harm in trying!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;natural-lighting&quot;&gt;Natural Lighting &lt;a class=&quot;anchor-link&quot; href=&quot;#natural-lighting&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s kick off with natural lighting. This can be anything from sunset and sunrise, to a full moon at midnight: if the lighting works, let’s try to use it.&lt;/p&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;
  &lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/IMG_4634.JPG&quot;&gt;
  &lt;figcaption&gt;1/500s | f/6.3 | ISO 100&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;1/500s | f/6.3 | ISO 100&lt;/p&gt;
&lt;p&gt;For this shot I was perfectly happy to sacrifice detail in the locomotive, as I knew the backlit smoke effects coupled with the streaky sky would deliver a dramatic image.&lt;/p&gt;
&lt;p&gt;There are many reasons why I chose this photo to share, but my main reason was to demonstrate to you how different lighting conditions can dramatically alter a photo. In this example, the flare from the setting sun has cast some purple hues in the smoke erupting from the chimney. Further down the track the rails are picked out before disappearing into a haze, and the intricate patterns in the clouds are highlighted by the diffused sun.&lt;/p&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;
  &lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/MG-Box030-Slide014---R711-departing-St.-Arnaud-1999-04-04.JPG&quot;&gt;
  &lt;figcaption&gt;A scanned slide of R711 departing St. Arnaud back in July 1999.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In a scene like this it can be easy for the auto-focus system on your camera to hunt for a focal point, often leading to out-of-focus pictures.&lt;/p&gt;
&lt;p&gt;A trick I like to use is selecting an autofocus point on my camera and training it on the headlight; the smokebox is often where the eye is naturally drawn to.&lt;/p&gt;
&lt;p&gt;Glint shots such as this are a personal favourite of mine: they tend to hide the some of the distractions in a scene while simultaneously picking out other parts of interest. Picture this as a midday shot with high sun: the smoke would still make for an interesting sight but, for me at least, it would lose some of its magic.&lt;/p&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;
  &lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/MG-Box033-Slide037.jpg&quot;&gt;
  &lt;figcaption&gt;3801 leads 3830 through western Victoria in April 2000.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This shot was taken early evening in April 2000, after 3801 and 3830 became locked at Dimboola following an overnight derailment. I knew that the setting sun would dominate the photo, so I was able so shift my composition just enough to hide it behind the trees.&lt;/p&gt;
&lt;p&gt;In a scene like this it’s tempting to go for a tighter crop. I chose to go for a wider frame here to help depict the vastness of the landscape these two locos were travelling through. Also, with a sky like that, why would you want to crop it out?&lt;/p&gt;
&lt;p&gt;These last two photos were taken on Kodachrome film and scanned on a Plustek Opticfilm slide scanner.&lt;/p&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;
  &lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/IMG_7087.jpg&quot;&gt;
  &lt;figcaption&gt;12A leaves Menzies Creek with a dinner train for Nobelius Siding.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Making use of the full moon, I took this long exposure of 12A leaving Menzies Creek one night on a dinner train. It’s not one of my favourite photos, but I’ve included it tonight to demonstrate the stunning effect a full moon can have on the sky in a night photo. For reference, this was taken at 7:30 pm on an April night – well after the sun had set.&lt;/p&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;
  &lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/IMG_7761.jpg&quot;&gt;
  &lt;figcaption&gt;Y112 sits at Ballarat station.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Right on the edge of nightfall, the golden hour can deliver some amazing colours and contrasts in light. If you’ve been predominantly a ¾ sun shooter and you want to branch out into something different, scenes like this are perfect ways to practice.&lt;/p&gt;
&lt;p&gt;I’ve included this shot because of the unique lighting effects at Ballarat station; the arching roof frames the shot and focuses the eye down. The sunlight picks out various details amongst the shot; the tactile platform dots, the escaping steam, and the tops of the rails. Interestingly the marker lights on the locomotive are lit up, which helps to balance out the otherwise completely silhouetted smokebox. Possibly my favourite part of this photo is where the sunlight bursts through the cab window and highlights the boiler.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Stick around for parts 2, 3, 4 and 5!&lt;/p&gt;
&lt;p&gt;Thanks to Alan Shaw for the photo of me mid-presentation.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using AWS Secrets Manager for .env files</title>
    <link href="https://michaelgreenhill.net/using-aws-secrets-manager-for-.env-files/"/>
    <updated>2020-02-17T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/using-aws-secrets-manager-for-.env-files/</id>
    <content type="html">&lt;p&gt;Managing environment files for highly-available cloud apps can be tricky. The easiest option, of course, is to embed these environment files into your code repo, but of course, that then commits secrets (passwords, API keys, etc) into the repo for all to see.&lt;/p&gt;
&lt;p&gt;Yeah, not such a great idea, then.&lt;/p&gt;
&lt;p&gt;One option is to use AWS Secrets Manager. This tool securely stores your secrets (for the princely sum of $0.40 per secret per month) - well, as securely as your IAM policies dictate.&lt;/p&gt;
&lt;h2 id=&quot;what-exactly-is-a-secret%3F&quot;&gt;What exactly is a secret? &lt;a class=&quot;anchor-link&quot; href=&quot;#what-exactly-is-a-secret%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of pricing, the AWS pricing model lists $0.40 per secret per month. A secret can contain multiple key=value pairs, up to a total size of 10kb per secret.&lt;/p&gt;
&lt;p&gt;With that in mind, it’s trivial to create a key=value stack in Secrets Manager.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/image-7.png&quot; alt=&quot;Example AWS Secret&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;accessing-the-secrets-from-ec2&quot;&gt;Accessing the secrets from EC2 &lt;a class=&quot;anchor-link&quot; href=&quot;#accessing-the-secrets-from-ec2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Assuming you’ve been following the AWS best practices and have assigned a role to your EC2 instances, it’s just a matter of creating an IAM policy that grants access to the secret, and attaching it to your EC2 role.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;secretsmanager:GetResourcePolicy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;secretsmanager:GetSecretValue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;secretsmanager:DescribeSecret&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;secretsmanager:ListSecretVersionIds&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;ARN of your fancy new secret&gt;&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This policy grants read-only access to your secret (because your EC2 instance should not be able to manipulate the secret!)&lt;/p&gt;
&lt;p&gt;The final step is to extract the secret and dump it to a .env file in KEY=“value” format.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;AWS_SECRET_ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my-super-secret-secret&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;AWS_REGION&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ap-southeast-2&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;ENVFILE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/srv/app/.env&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Ensure your EC2 instance has the most recent version of the AWS CLI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y python3-pip jq&lt;br&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; awscli --upgrade&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Export the secret to .env&lt;/span&gt;&lt;br&gt;aws secretsmanager get-secret-value --secret-id &lt;span class=&quot;token variable&quot;&gt;$AWS_SECRET_ID&lt;/span&gt; --region &lt;span class=&quot;token variable&quot;&gt;$AWS_REGION&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br&gt;  jq -r &lt;span class=&quot;token string&quot;&gt;&#39;.SecretString&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br&gt;  jq -r &lt;span class=&quot;token string&quot;&gt;&quot;to_entries|map(&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;\(.key)=&lt;span class=&quot;token entity&quot; title=&quot;\\&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;\(.value|tostring)&lt;span class=&quot;token entity&quot; title=&quot;\\&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;)|.[]&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$ENVFILE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s pretty much it!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Cloudflare - is it worth it?</title>
    <link href="https://michaelgreenhill.net/cloudflare-is-it-worth-it/"/>
    <updated>2020-02-19T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/cloudflare-is-it-worth-it/</id>
    <content type="html">&lt;p&gt;So this website is still in its infancy. Less than a week old, in fact.&lt;/p&gt;
&lt;p&gt;During my setup process (which I’ll detail in a forthcoming article…) I made the decision wrap my site in the warm embrace of Cloudflare - a magical service full of the hopes, dreams, and promises of a secured and snappier website.&lt;/p&gt;
&lt;p&gt;I dunno about security, but the snappier side of things left a lot to be desired…&lt;/p&gt;
&lt;h2 id=&quot;slower-than-a-wet-week&quot;&gt;Slower than a wet week &lt;a class=&quot;anchor-link&quot; href=&quot;#slower-than-a-wet-week&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So goes one of my dad’s favourite catch phrases.&lt;/p&gt;
&lt;p&gt;We’re talking about a 600ms page load penalty. Considering that the native (i.e., nginx &amp;gt; Ghost) application renders pages in the browser within 70ms, and nginx caching brings that down to 50ms (barely more than the network RTT!), it’s just abysmal.&lt;/p&gt;
&lt;p&gt;For the visually-inclined:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/michaelgreenhill.net-direct-nocaching-1.png&quot; alt=&quot;Direct to nginx&quot;&gt;&lt;/p&gt;
&lt;p&gt;…versus…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/michaelgreenhill.net-cloudflare-1.png&quot; alt=&quot;Suffering in agony with Cloudflare&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media3.giphy.com/media/QIQTfximd3AuQ/giphy.webp&quot; alt=&quot;SLOOWWW&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;consciously-uncoupling-from-cloudflare&quot;&gt;Consciously uncoupling from Cloudflare &lt;a class=&quot;anchor-link&quot; href=&quot;#consciously-uncoupling-from-cloudflare&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most important step, of course, is to disable the proxy status of your Cloudflare DNS records. There’s all sorts of privacy considerations with this, but if you’re a smart cookie and are hosting your services externally (i.e., on AWS like this handsome website), then chances are you also don’t subscribe to the security-through-obscurity model that Cloudflare offers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/image-8.png&quot; alt=&quot;Click the orange cloud to Make Websites Great Again&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, you’ll need to ensure your servers are appropriately hardened against security threats. &lt;strong&gt;Since this is something you should be doing regardless&lt;/strong&gt;, I won’t go it any further.&lt;/p&gt;
&lt;p&gt;You have hardened your servers, right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media3.giphy.com/media/VfzJD0dNOXdOX9UsV6/giphy.webp&quot; alt=&quot;Totally...&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;but%2C-cloudflare-caches-my-website!&quot;&gt;But, Cloudflare caches my website! &lt;a class=&quot;anchor-link&quot; href=&quot;#but%2C-cloudflare-caches-my-website!&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And this is a good thing! If your site is anything other than static HTML there’s great value in caching it and minimising a lot of the CPU time - especially if you’re on AWS and want to use those juicy CPU credits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But nginx can do this for you!&lt;/strong&gt; (and yeah, so can Apache, if you like living in the 90’s)&lt;/p&gt;
&lt;p&gt;This is a concept called &lt;strong&gt;microcaching&lt;/strong&gt;. There’s a volume of information out there on the benefits microcaching, so instead of delving too deeply I suggest you start with the official nginx blog: &lt;a href=&quot;https://www.nginx.com/blog/benefits-of-microcaching-nginx/&quot;&gt;https://www.nginx.com/blog/benefits-of-microcaching-nginx/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using the live example from this site:&lt;/p&gt;
&lt;pre class=&quot;language-nginx&quot;&gt;&lt;code class=&quot;language-nginx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;proxy_cache_path&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;opt&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;cache&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ghost_secure levels&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; keys_zone&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ghost_secure&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;m max_size&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;g inactive&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;m use_temp_path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;off&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;proxy_cache_key&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;$scheme$request_method$host$request_uri&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;proxy_cache_methods&lt;/span&gt; GET HEAD&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    proxy_cache_revalidate        on&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_cache_use_stale&lt;/span&gt;         updating&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    proxy_cache_background_update on&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_cache_lock&lt;/span&gt;              on&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_cache&lt;/span&gt;                   ghost_secure&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_cache_valid&lt;/span&gt;             any &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_ignore_headers&lt;/span&gt;          Cache&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Control&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_cache_use_stale&lt;/span&gt;         error &lt;span class=&quot;token keyword&quot;&gt;timeout&lt;/span&gt; http_500 http_502 http_503 http_504&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_cache_bypass&lt;/span&gt;            &lt;span class=&quot;token variable&quot;&gt;$http_upgrade&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;# ... all you other config directives go here...&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;# example proxy_pass configuraton for your backend config&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; X&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Forwarded&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;For &lt;span class=&quot;token variable&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; X&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Forwarded&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Proto &lt;span class=&quot;token variable&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; X&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Real&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;IP &lt;span class=&quot;token variable&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; Host &lt;span class=&quot;token variable&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2369&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, if you’re using fastcgi for a PHP application (for example), you can use the fastcgi caching instead.&lt;/p&gt;
&lt;p&gt;As far as a small blog like this goes there’s little benefit in microcaching: with it disabled, Ghost still renders pages in tidy fashion. But if I was to get the Reddit hug of death, microcaching would save not only my site, but also my wallet.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lessons learned from a DDoS attack</title>
    <link href="https://michaelgreenhill.net/lessons-learned-from-a-ddos-attack/"/>
    <updated>2020-02-22T11:00:00+11:00</updated>
    <id>https://michaelgreenhill.net/lessons-learned-from-a-ddos-attack/</id>
    <content type="html">&lt;p&gt;One of our brands recently suffered a DDoS attack - thankfully not a sustained one, but enough to impact website availability and rethink our defensive strategies.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-a-ddos-attack%3F&quot;&gt;What’s a DDoS attack? &lt;a class=&quot;anchor-link&quot; href=&quot;#what%E2%80%99s-a-ddos-attack%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;DDoS stands for &lt;strong&gt;Distributed Denial of Service&lt;/strong&gt;. From my besties over at Cloudflare:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A distributed denial-of-service (DDoS) attack is a malicious attempt to disrupt normal traffic of a targeted server, service or network by overwhelming the target or its surrounding infrastructure with a flood of Internet traffic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://media2.giphy.com/media/AhjXalGPAfJg4/giphy.webp&quot; alt=&quot;This is fine&quot;&gt;&lt;/p&gt;
&lt;p&gt;So, what did we actually learn from this event?&lt;/p&gt;
&lt;h2 id=&quot;log-everything&quot;&gt;Log everything &lt;a class=&quot;anchor-link&quot; href=&quot;#log-everything&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Absolutely everything. All the logs, all the time.&lt;/p&gt;
&lt;p&gt;I had previously set up a centralised log ingestion and analysis system (Graylog) on-prem with a combination of rsyslog and nxlog feeding messages into discrete streams, with extractors to convert the plain text logs into meaningful data.&lt;/p&gt;
&lt;p&gt;This was a massive help; we were able to quickly search logs of our reverse-proxy server and our backend Docker instances for messages relating to the incident. We were able to look for a specific timeframe, find the remote IP addresses where the attack originated from, and then search the logs for the rest of our fleet to see if the attacker had been probing anything else.&lt;/p&gt;
&lt;p&gt;Unfortunately, the one thing we weren’t logging were nginx access logs. This could have added value to our incident analysis.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/image-9.png&quot; alt=&quot;All the logs, all the time&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;not-all-attacks-can-be-stopped-by-fail2ban&quot;&gt;Not all attacks can be stopped by fail2ban &lt;a class=&quot;anchor-link&quot; href=&quot;#not-all-attacks-can-be-stopped-by-fail2ban&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We had been heavily dependent on fail2ban as our primary mitigation for DDoSing. However, fail2ban works from the logfiles of services it monitors - nginx, sshd, etc.&lt;/p&gt;
&lt;p&gt;What happens if the log entries don’t trigger a fail2ban event?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/michaelgreenhill-net/cdn/2020/02/image-10.png&quot; alt=&quot;Fail2banfail&quot;&gt;&lt;/p&gt;
&lt;p&gt;Within less than 60 seconds we had nearly 400 TCP CONNECT events to our reverse proxy from four IP addresses. If we had been using a limiter queue on iptables these connections would have been blocked at the firewall level, massively reducing the risk of a successful DDoS event.&lt;/p&gt;
&lt;h2 id=&quot;don%E2%80%99t-put-all-your-eggs-in-one-basket&quot;&gt;Don’t put all your eggs in one basket &lt;a class=&quot;anchor-link&quot; href=&quot;#don%E2%80%99t-put-all-your-eggs-in-one-basket&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Due to a myriad of political reasons, this brand’s website was not load balanced and not protected by a WAF. The result was obvious; the backend server crumbled under the load, and our frontend server started throwing HTTP 500 outage pages.&lt;/p&gt;
&lt;p&gt;Further, we naivley believed our datacentre would shield us from a DDoS attack. The truth of the matter is, this attack was of such a small scale that it didn’t even register on their alerting, instead showing up as little more than a surge of traffic synonomous with a flash sale/click frenzy. Instead, our website gave way before the DDoS attack fully gained momentum.&lt;/p&gt;
&lt;h2 id=&quot;microcache&quot;&gt;Microcache &lt;a class=&quot;anchor-link&quot; href=&quot;#microcache&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The evidence gathered in the course of the investigation suggests that our backend web application gave up the ghost under the load, before our datacentre’s DDoS protection even registered it. That doesn’t bode well for our marketing department. Suppose they organised a click frenzy sale, and our traffic volumes spiked?&lt;/p&gt;
&lt;p&gt;One way to mitigate that is to leverage the microcaching functionality of nginx. This little tool lets us cache parts of the website for short periods of time (e.g. 30 seconds), resulting in significant reduction in resource usage on the backend servers.&lt;/p&gt;
&lt;p&gt;Now, this would’ve done almost nothing to mitigate the DDoS attack. At best, it would have prolonged it enough for our datacentre’s DDOS protection to get into gear. However, it’s an important real-world demonstration of the capabilities of that brand’s website.&lt;/p&gt;
&lt;h2 id=&quot;mitigations&quot;&gt;Mitigations &lt;a class=&quot;anchor-link&quot; href=&quot;#mitigations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, Cloudflare is an obvious way to mitigate the risk of a DDoS, but you all know my feelings on Cloudflare…&lt;/p&gt;
&lt;p&gt;The current plan is to move this brand’s site to AWS, at which point it’ll go behind an auto-scaling group, an application load balancer, and a WAF.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media1.giphy.com/media/wvWJOoYmFnSp2/giphy.webp&quot; alt=&quot;Surely you can&#39;t be serious?&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>AWS Automation Wizardry</title>
    <link href="https://michaelgreenhill.net/aws-automation-wizardry/"/>
    <updated>2020-04-05T10:00:00+10:00</updated>
    <id>https://michaelgreenhill.net/aws-automation-wizardry/</id>
    <content type="html">&lt;p&gt;In one of my &lt;a href=&quot;https://michaelgreenhill.net/using-aws-secrets-manager-for-.env-files/&quot;&gt;previous posts&lt;/a&gt; I demonstrated the use of AWS Secrets Manager for securely keeping and maintaining the state of a Laravel application .env file.&lt;/p&gt;
&lt;p&gt;Storing it is one thing - but how do you inform the Laravel application of the updated .env file when the secret changes? SSH-ing into each ephemeral EC2 instance is a nightmare: there &lt;em&gt;has&lt;/em&gt; to be a better way.&lt;/p&gt;
&lt;h2 id=&quot;enter-the-automator&quot;&gt;Enter the automator &lt;a class=&quot;anchor-link&quot; href=&quot;#enter-the-automator&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Making use of &lt;strong&gt;CloudWatch Events&lt;/strong&gt; we can trigger a &lt;strong&gt;Systems Manager&lt;/strong&gt; command whenever the secret is updated.&lt;/p&gt;
&lt;p&gt;The first thing we need to do is define the &lt;strong&gt;event pattern&lt;/strong&gt; in CloudWatch Events.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;eventName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;PutSecretValue&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;eventSource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;secretsmanager.amazonaws.com&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;requestParameters&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;secretId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:secretsmanager:&amp;lt;your region&gt;:&amp;lt;your account id&gt;:secret:&amp;lt;your secret ID&gt;&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;detail-type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;AWS API Call via CloudTrail&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;aws.secretsmanager&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to add a target. Being AWS there are dozens of options available - in this example, I’m going to use AWS Systems Manager to run a command on the EC2 instances that are affected by this updated secret.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/cloudwatch-ssm.png&quot; alt=&quot;Look at all of the automation&quot;&gt;&lt;/p&gt;
&lt;p&gt;This requires an IAM role that CloudWatch can use, with an IAM policy that enables SSM and EC2 functionality.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For best results shake before opening and &lt;strong&gt;ensure that you are adhering to the principle of least privilege&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:ListDocuments&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:ListDocumentsVersions&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:DescribeDocument&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:GetDocument&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:DescribeInstanceInformation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:DescribeDocumentParameters&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:DescribeInstanceProperties&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ssm:SendCommand&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:ec2:ap-southeast-2:*:instance/*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:ssm:ap-southeast-2:*:document/*&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:CancelCommand&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:ListCommands&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:ListCommandInvocations&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ec2:DescribeInstanceStatus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ssm:StartAutomationExecution&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:ssm:::automation-definition/&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ssm:DescribeAutomationExecutions &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:StopAutomationExecution&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;ssm:GetAutomationExecution&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:ssm:::automation-execution/&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this assumes that you have onboarded your EC2 instances into AWS Systems Manager.&lt;/p&gt;
&lt;h2 id=&quot;tl%3Bdr&quot;&gt;TL;DR &lt;a class=&quot;anchor-link&quot; href=&quot;#tl%3Bdr&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The upside of all of this is that whenever a specific AWS Secrets Manager secret is updated a bash command is executed on a specific group of EC2 instances (identified by a tag). I think that’s pretty cool!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dealing with silent failures</title>
    <link href="https://michaelgreenhill.net/dealing-with-silent-failures/"/>
    <updated>2020-05-05T10:00:00+10:00</updated>
    <id>https://michaelgreenhill.net/dealing-with-silent-failures/</id>
    <content type="html">&lt;h2 id=&quot;living-on-hopes-and-prayers&quot;&gt;Living on hopes and prayers &lt;a class=&quot;anchor-link&quot; href=&quot;#living-on-hopes-and-prayers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How many of you manually check a mission-critical script or task every day to ensure it’s actually run? And, how many of you aren’t checking it, instead blindly trusting that the Gods of Computing have allowed your peasant code to run without interference?&lt;/p&gt;
&lt;p&gt;The concept of &lt;strong&gt;silent failures&lt;/strong&gt; should not be new to anyone reading this blog. Shit happens; servers crash, internet connections drop out, HR changes the bloody organisational structure and breaks your automated onboarding… Shit. Happens.&lt;/p&gt;
&lt;p&gt;When was the last time you checked that your VM backups were actually running…? &lt;em&gt;Ahh; the distant sound of panicked typing.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;so-how-can-i-manage-silent-failures%3F&quot;&gt;So how can I manage silent failures? &lt;a class=&quot;anchor-link&quot; href=&quot;#so-how-can-i-manage-silent-failures%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There’s a multitude of different ways you can achieve this, but my preferred solution is via a simple web service called &lt;a href=&quot;https://healthchecks.io/&quot;&gt;Healthchecks.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The premise is simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a check, which gives you a UUID&lt;/li&gt;
&lt;li&gt;Set a schedule&lt;/li&gt;
&lt;li&gt;Send a request to the API endpoint (referencing the UUID in the URL)&lt;/li&gt;
&lt;li&gt;Profit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two key components of addressing silent failures, which &lt;a href=&quot;http://healthchecks.io/&quot;&gt;Healthchecks.io&lt;/a&gt; handles well:&lt;/p&gt;
&lt;h3 id=&quot;explicit-failures&quot;&gt;Explicit failures &lt;a class=&quot;anchor-link&quot; href=&quot;#explicit-failures&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Through their API it’s possible to send an &lt;strong&gt;explicit failure&lt;/strong&gt; alert, indicating that your code has encountered an error and has goofed up. This would typically be handled in a &lt;code&gt;try/catch&lt;/code&gt; block:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$script&lt;/span&gt;:HealthcheckUrl = &lt;span class=&quot;token string&quot;&gt;&quot;https://hc-ping.com/your-uuid-here&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;# We haven&#39;t provided an identifier and we have supplied an invalid parameter; this will fail&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AdUser &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;blah&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$script&lt;/span&gt;:HealthcheckUrl&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$script&lt;/span&gt;:HealthcheckUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;/fail&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;implicit-failures&quot;&gt;Implicit failures &lt;a class=&quot;anchor-link&quot; href=&quot;#implicit-failures&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Through the magic of scheduling we can also alert on an &lt;strong&gt;implicit failure&lt;/strong&gt; - the code was &lt;em&gt;supposed&lt;/em&gt; to run, but since we never received an explicit success ping we can assume it’s broken and, therefore, have an &lt;em&gt;implicit failure&lt;/em&gt; on our hand.&lt;/p&gt;
&lt;p&gt;This is particularly useful in situations such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cron/scheduler failing to start&lt;/li&gt;
&lt;li&gt;Timezone confusion&lt;/li&gt;
&lt;li&gt;Script failing to complete and explicit failures have not been added&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also flag an implicit failure by measuring &lt;strong&gt;script runtime&lt;/strong&gt;: this is very useful when you have a tightly-coupled set of scripts or tasks that rely heavily on tasks completing within a pre-defined timeframe. For example; assume you have a MSSQL maintenance plan to back up your database; this runs at 2 AM and typically takes 45 minutes to complete. At 3 AM another task copies that backup to a different storage medium in a different location (remember your &lt;a href=&quot;https://www.backblaze.com/blog/the-3-2-1-backup-strategy/&quot;&gt;3-2-1 backup rule&lt;/a&gt;, folks).&lt;/p&gt;
&lt;p&gt;What happens if the MSSQL maintenance plan hasn’t finished by 3 AM? This would be an implicit failure, as a downstream dependency (your copy task) will fail.&lt;/p&gt;
&lt;h2 id=&quot;what-about-the-silent-part%3F&quot;&gt;What about the silent part? &lt;a class=&quot;anchor-link&quot; href=&quot;#what-about-the-silent-part%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For starters it interacts with all the standard alerting and messaging services (such as PagerDuty, OpsGenie, Slack, and Teams), but it also exposes a &lt;strong&gt;webhook function&lt;/strong&gt;. With this it’s possible to create any kind of customised alert.&lt;/p&gt;
&lt;p&gt;For example; want to push a ticket to JIRA Service Desk when something mission-critical fails?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://michaelgreenhill.net/images/healthchecks-io-webook.png&quot; alt=&quot;Test&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;request-body&quot;&gt;Request Body &lt;a class=&quot;anchor-link&quot; href=&quot;#request-body&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;requestParticipants&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;JIRA-user-ID&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;serviceDeskId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;requestTypeId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;requestFieldValues&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;summary&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;$NAME is $STATUS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The automated health check $NAME is $STATUS as of $NOW\n\nhttps://healthchecks.io/projects/Your-Healthchecks-Project-ID/checks/\n\n$TAGS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;customfield_13052&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The value of a custom JIRA field&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;priority&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3 - Medium&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;request-headers&quot;&gt;Request Headers &lt;a class=&quot;anchor-link&quot; href=&quot;#request-headers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Accept: application/json
Authorization: Basic Your-JIRA-API-Key
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;generating-a-jira-api-token&quot;&gt;Generating a JIRA API token &lt;a class=&quot;anchor-link&quot; href=&quot;#generating-a-jira-api-token&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It’s a long-winded process: follow the instructions over at &lt;a href=&quot;https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/&quot;&gt;https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/&lt;/a&gt; for enabling basic authentication for JIRA.&lt;/p&gt;
&lt;p&gt;There you go; by enabling monitoring on your scripts or tasks you can tame the silent failures beast.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: enabling healthchecks is not an excuse to not check your backups. You should still be testing the validity and restorability of your backups; otherwise, they may as well be useless!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
</feed>